{"version":3,"sources":["components/PostsList/PostsList.jsx","api/api.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["PostsList","select","posts","showPostInfo","postSelected","filterList","useMemo","filter","post","userId","className","map","key","id","title","type","value","onClick","getUserPosts","path","options","fetch","then","promise","json","result","data","NewCommentForm","postId","loadComments","useState","name","email","body","newComment","setNewComment","setCommentPart","onSubmit","event","comment","preventDefault","method","JSON","stringify","onChange","target","placeholder","PostDetails","comments","commentsShow","hideComments","length","commentId","defaultProps","App","selectedUserId","setSelectedUserId","users","setUsers","setPosts","setComments","setPostId","getDataFromServer","dataType","a","useEffect","selectedPost","find","commentsFromSelectedPosts","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57cf9d53.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = ({ select, posts, showPostInfo, postSelected }) => {\n  const filterList = useMemo(() => (\n    select === '0'\n      ? posts\n      : posts.filter(post => post.userId === +select)\n  ), [select, posts]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {filterList.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>\n                [User #\n                {post.userId}\n                ]:\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              value={post.id}\n              className=\"PostsList__button button\"\n              onClick={showPostInfo}\n            >\n              {+postSelected === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  select: PropTypes.string.isRequired,\n  showPostInfo: PropTypes.func.isRequired,\n  posts: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  postSelected: PropTypes.string.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const getUserPosts = (path, options) => (\n  fetch(`${BASE_URL}/${path}`, options)\n    .then(promise => promise.json())\n    .then(result => result.data)\n);\n\nexport const deleteComment = commentId => (\n  getUserPosts(`comments/${commentId}`, {\n    method: 'DELETE',\n  }));\n\nexport const addComment = comment => (\n  getUserPosts(`comments`, {\n    method: 'POST',\n    body: JSON.stringify(comment),\n  }));\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { addComment } from '../../api/api';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, loadComments }) => {\n  const [newComment, setNewComment] = useState({\n    name: '',\n    email: '',\n    body: '',\n    postId,\n  });\n\n  const setCommentPart = (key, value) => {\n    setNewComment({\n      ...newComment,\n      [key]: value,\n      postId,\n    });\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        addComment(newComment)\n          .then(loadComments);\n        setNewComment({\n          name: '',\n          email: '',\n          body: '',\n        });\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          value={newComment.name}\n          onChange={({ target }) => setCommentPart(target.name, target.value)}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          value={newComment.email}\n          onChange={({ target }) => setCommentPart(target.name, target.value)}\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          value={newComment.body}\n          onChange={({ target }) => setCommentPart(target.name, target.value)}\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.string.isRequired,\n  loadComments: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport { deleteComment } from '../../api/api';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ title, postId, comments, loadComments }) => {\n  const [commentsShow, hideComments] = useState(true);\n\n  return (\n    <div className=\"PostDetails\">\n      {postId !== '' ? (\n        <>\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>\n              {title}\n            </p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            {comments.length > 0 && (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => hideComments(!commentsShow)}\n              >\n                {`${commentsShow\n                  ? 'Hide'\n                  : 'Show'} ${comments.length} comments`}\n              </button>\n            )}\n\n            {commentsShow && (\n              <ul className=\"PostDetails__list\">\n                {comments.map(comment => (\n                  <li\n                    key={comment.id}\n                    className=\"PostDetails__list-item\"\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => deleteComment(comment.id)\n                        .then(loadComments('comments'))\n                      }\n                      value={comment.id}\n                    >\n                      X\n                    </button>\n                    <p>\n                      {comment.body}\n                    </p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={postId}\n                loadComments={[loadComments('comments')]}\n              />\n            </div>\n          </section>\n        </>\n      ) : (\n        <h2>Please select a post in left column!!!</h2>\n      )}\n    </div>\n  );\n};\n\nPostDetails.defaultProps = {\n  title: '',\n};\n\nPostDetails.propTypes = {\n  title: PropTypes.string,\n  postId: PropTypes.string.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  loadComments: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/api';\n\nconst App = () => {\n  const [selectedUserId, setSelectedUserId] = useState('0');\n\n  const [users, setUsers] = useState([]);\n  const [posts, setPosts] = useState([]);\n  const [comments, setComments] = useState([]);\n\n  const [postId, setPostId] = useState('');\n\n  const getDataFromServer = async(dataType) => {\n    const data = await getUserPosts(dataType);\n\n    switch (dataType) {\n      case 'posts':\n        setPosts(data);\n        break;\n      case 'users':\n        setUsers(data);\n        break;\n      default:\n        setComments(data);\n    }\n  };\n\n  useEffect(() => {\n    getDataFromServer('posts');\n    getDataFromServer('users');\n    getDataFromServer('comments');\n  }, []);\n\n  const showPostInfo = (event) => {\n    if (event.target.value === postId) {\n      setPostId('');\n    } else {\n      setPostId(event.target.value);\n    }\n  };\n\n  const selectedPost = posts.find(post => post.id === +postId);\n  const commentsFromSelectedPosts = comments\n    .filter(comment => comment.postId === +postId);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={event => setSelectedUserId(event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            select={selectedUserId}\n            posts={posts}\n            showPostInfo={showPostInfo}\n            postSelected={postId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails\n            postId={postId}\n            {...selectedPost}\n            comments={commentsFromSelectedPosts}\n            loadComments={getDataFromServer}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}